// Begin Typography Styles
//
// ============================================
html {
  font-size: $baseFontPercentage;
}
body {
  if $dev-mode {
    devModeGrid();
    background-repeat: repeat-y;
    backgroundSize(100% $baseGutter);  
  }else{
    background: $bodyBg;
  }
  fontSH($baseFontSize);
  color: $text;
}
h1, h2, h3, h4 {
  font-weight: 500;
}
h5, h6 {
  font-weight: bold; 
}
h1 {
  typeRhythm(3, 1, 1);
  &.is_lead_heading {
    typeRhythm(4, 1, 2);
  }
}
h2 {
  typeRhythm(2,2,1);
}
h3 {
  typeRhythm(1.5, .5, .5);  
}
h4, dt {
  // prop('margin', $baseGutter 0);
  // heading($h4);
  typeRhythm(1, 1, null);
}
dt {
  margin-bottom: 0;
}
h5 {
  // prop('margin', ($baseGutter / 2) 0 ($baseGutter / 2));
  // heading($h5);
  typeRhythm(0, 1, null);
}
h6 {
  typeRhythm(-.5, 1, null);
}

// Paragraphs and Lists
p {
  @extend .baseline_margin;
}

dl {
  prop(margin, $baseGutter 0 0);
  dt {
    heading($h3);
  }
  dd {
    margin: 0;
  }
}
.has_columns {
  dt, dd {
    display: table-cell;
    vertical-align: top;
  }
  dt {
    heading($h4);
    white-space: nowrap;
  }
  dd {
    prop(padding-left, $baseGutter);
  }

}
ul, ol {
  @extend .baseline_margin;
  prop('padding-left', ($baseGutter * 1.5));
}
ul {
  
}
ol {

}
li {
  .no-bullet & {
    list-style: none;
  }

}

// Links
a {
  color: $link;
  text-decoration: underline;
  &:hover {
    color: $linkHover;
    text-decoration: none;
  }
  &:active {
    color: $linkActive;
  }
  &:focus {
    outline: none;
    background: $linkHover;
    color: $darkGrey;
  }
  &:visited {
    color: $linkVisited;
  }
}

// Misc Elements
small {
  typeRhythm(.5,null,null);
}
dfn {
  prop(border, 1px, dotted);
  border-radius(3px);
}
ins {
  // removing text-decoration; too close to link styling
  text-decoration: none;
  &:before{
    content: '\BB';
  }
}

code {
  display: inline-block;
  prop('padding', 0 6px);
  if($codeblockBackground is defined) {
    background: $codeblockBackground;
  }else{
    background: $textInverted;
  }
  borderRadius(3px);
  vertical-align: top;
}

pre {
  overflow: auto;
  max-width: 100%;
  prop(margin, $baseGutter 0);
  prop(border, 1px, solid $grey);
  borderRadius(3px);
  background-color: $lightGrey;
  background-image: linear-gradient(top, transparent 50%, $textInverted 50%, $textInverted, only: webkit moz official);
  background-repeat: repeat-y;
  backgroundSize(100% $baseGutter * 2);
  
  // Adds a 'caption' of sorts to the top of the pre box
  &[data-caption] {
    position: relative;
    prop(padding-top, $baseGutter);
    
    &:before {
      position: absolute;
      prop(top,4px);
      prop(left,4px);
      if($codeblockCaptionBackground is defined) {
        background: $codeblockCaptionBackground;
      }else{
        background: white;
      }
      prop(padding, ($baseGutter / 6) ($baseGutter / 4));
      font-family: $helvetica;
      font-weight: bold;
      content: attr(data-caption);
    }
  }
  code {
    padding: 0;
    border: none;
    background: none;
  }
}

// Blockquotes
.inspire-blockquote {
  position: relative;
  if($blockquoteMargin is defined) {
    prop(margin, $blockquoteMargin);
  }else{
    prop(margin-bottom, $baseGutter);
  }
  typeRhythm(.25, null, null);  
  if($blockquoteBlockColour is defined){
    color: $blockquoteBlockColour;
  }
  // Variations
  &.has_border {
    if ($blockquoteBorder is defined) {
      $borderType = $blockquoteBorder
    }else{
      $borderType = border-left
    }
    if($blockquoteBorderWidth is defined) {
        $borderWidth = $blockquoteBorderWidth;
    }else{
      $borderWidth = 2px;
    }
    if($blockquoteBorderStyle is defined) {
      $borderStyle = $blockquoteBorderStyle;
    }else{
      $borderStyle = solid;
    }
    if($blockquotePadding is defined) {
      $padding = $blockquotePadding;
    }else{
      $padding = $baseGutter;
    }
    prop($borderType, $borderWidth, $borderStyle);
    prop(padding, 0 $padding 0 ($padding - $borderWidth));
    
  }
  
  // Large wrapping quoatation
  &.has_quotation {
    text-align: center;
    vertical-align: middle;
    $padding ?= $blockquotePadding is defined ? $blockquotePadding : ($baseGutter / 2) $baseGutter ($baseGutter / 2) $baseGutter * 2;
    prop(padding, $padding);
    
    &:before {
      z-index: -1;
      display: inline-block;
      if($blockquoteQuotationGlyphOpacity is defined) {
        opacity: .1;
      }
      position: absolute;
      top: auto;
      right: 0;
      left: 0;
      font-size: $blockquoteQuotationGlyphSize is defined ? $blockquoteQuotationGlyphSize : 400%;
      font-family: $blockquoteQuotationGlyphFont is defined ? $blockquoteQuotationGlyphFont : $decorative;  
      line-height: 1;
      text-align: left;
      color: $blockquoteQuotationGlyphColour is defined ? $blockquoteQuotationGlyphColour : lighten($text,50%);
      content: $blockquoteQuotationGlyph is defined ? $blockquoteQuotationGlyph : '\201C';
    }
  }
  cite {
    display: inline-block;
    font-size: 75%;
  }
}
// Cite
cite {
  if($citeColour is defined) {
    color: $citeColour;
  }
  if($citeGlyphContent is defined) {
    &:before {
      content: $citeGlyphContent;
    }
  }
}

// Inline quotes
.inspire-quote {
  if($inlineQuoteBackground is defined) {
    background: $inlineQuoteBackground;
    prop(padding,0 2px);
  }
  if($inlineQuoteColor is defined) {
    color: $inlineQuoteColor;
  }
  &:before, &:after {
    @extend .decorative_type;
  }
}
// // Colour-blocked pullquote
// .is_pullquote {
//   colourBlockedText();
// }



