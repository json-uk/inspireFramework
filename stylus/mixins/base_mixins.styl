//
// Global CSS Mixins 
//
// ============================================

// Typograpy Mixins
// ============================================

// Variables used in mixin calculation
// Uses Modular scale based on $baseLineHeight in _settings.styl
$h1 = rhythm(4);
$h2 = rhythm(3);
$h3 = rhythm(2);
$h4 = rhythm(1)
$h5 = rhythm(0);
$h6 = rhythm(-1);

// Font-Families
// Taken from this great SitePoint Article:
$times = unquote('Cambria, "Hoefler Text", Utopia, "Liberation Serif", "Nimbus Roman No9 L Regular", Times, "Times New Roman", serif');
$georgia = unquote('Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, "DejaVu Serif", "Bitstream Vera Serif", "Liberation Serif", Georgia, serif');
$garamond = unquote('"Palatino Linotype", Palatino, Palladio, "URW Palladio L", "Book Antiqua", Baskerville, "Bookman Old Style", "Bitstream Charter", "Nimbus Roman No9 L", Garamond, "Apple Garamond", "ITC Garamond Narrow", "New Century Schoolbook", "Century Schoolbook", "Century Schoolbook L", Georgia, serif');
$helvetica = unquote('Frutiger, "Frutiger Linotype", Univers, Calibri, "Gill Sans", "Gill Sans MT", "Myriad Pro", Myriad, "DejaVu Sans Condensed", "Liberation Sans", "Nimbus Sans L", Tahoma, Geneva, "Helvetica Neue", Helvetica, Arial, sans-serif');
$verdana = unquote('Corbel, "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", "DejaVu Sans", "Bitstream Vera Sans", "Liberation Sans", Verdana, "Verdana Ref", sans-serif');
$trebuchet = unquote('"Segoe UI", Candara, "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", Verdana, "Verdana Ref", sans-serif');
$impact = unquote('Impact, Haettenschweiler, "Franklin Gothic Bold", Charcoal, "Helvetica Inserat", "Bitstream Vera Sans Bold", "Arial Black", sans-serif');
$monospace  = unquote('Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace');
$decorative = unquote('Baskerville, "Goudy Old Style", Palatino, "Book Antiqua", serif');


// Heading 
// 
// Used to create h1-6 font-shorthand
// @param size: sets font-size and is used to calculate line-height ratio automatically
// @param shorthand: false[,true] If true, opts param is required
// @param opts: font-style
// @param family $helvetica: expects either $var for font-family, or string for custom family
// ============================================
heading(size = $h1, shorthand = false, opts = 'normal',  family = $baseFontStack) {
  if shorthand {  
    font(size, opts, family);
  }else{
    fontSize(size, true);
  }
} 

// Font Shorthand
fontSH(size, opts = 'normal', family = $baseFontStack) {
  if $old-ie {
    font-size: unit(size,'px');
  }
  font: unquote(opts) fontSize(size,false,true)unquote('/')lineHeight(size,true) unquote(family);
}

// Font-Size 
// @param size: expects target size in pixels; used to calculate px fallback
// @param includeLineHeight false[,true]: if true will also return the line-height ratio
// @param strOnly false[,true]: if true returns the value for font only for use in shorthand 'font'
fontSize(size = $baseFontSize, includeLineHeight = false, strOnly = false, ) { 
  if strOnly {
    return unit((remove-unit(size) / $baseFontContext),rem);
  }else{
    if $old-ie {
      font-size: size;
    }

    font-size: unit((remove-unit(size) / $baseFontContext),rem); 
    if includeLineHeight {
      lineHeight(size);
    } 
  }
}

// Unitless Line-height
lineHeight(size = $baseFontSize, strOnly = false) {
  if (size >= $h3){
    if strOnly {
      return round(remove-unit(size / $baseLineHeight) * $lineHeightRatio);
    }else{
      line-height: remove-unit((ceil(size / $baseLineHeight) * $baseLineHeight) / size);
    }  
  }else{
    if strOnly {
      return remove-unit($baseLineHeight / size);
    }else{
      line-height: remove-unit($baseLineHeight / size);
    }
  }
}    

// ====
// COLUMN, PUSH AND PULL MIXINS
// ================================================================================

// Layout Variables
$phoneMax = unit((539 / remove-unit($baseFontContext)),'em');
$tabletMin = unit((540 / remove-unit($baseFontContext)),'em');
$tabletMax = unit((800 / remove-unit($baseFontContext)),'em');
$desktopMin = unit((960 / remove-unit($baseFontContext)),'em');


// Column
// @param count: 1[-11], Number of columns to span
// @param cols: 12, Number of total cols; used as basis for calculating total width
// =================================================
column(count = 1, cols = $colsTotal) {
  $columnWidth = unit((100 / cols) * count,'%');
  width: $columnWidth;
  if ($old-ie) {
    *width: $columnWidth - $subPixelCorrection;
  }
}

// Push
// @param count: 1[-11], Number of columns to push
// @param cols: 12, Number of total cols; used as basis for calculating total width
// =================================================
push(count = 1, cols = 12) {
  $columnWidth = unit((100 / cols) * count,'%');
  margin-left: $columnWidth;
}
// Push
// @param count: 1[-11], Number of columns to push
// @param cols: 12, Number of total cols; used as basis for calculating total width
// =================================================

pull(count = 1, cols = 12) {
  $columnWidth = unit((100 / cols) * count,'%');
  margin-right: -($columnWidth);
}

// ====
// GLOBAL PROPERTIES MIXIN
// 
// Used for ALL CSS properties unless more complex use is required 
//
// @param type: CSS property to output; for example 'border'
// @param units: single, or space delimited units; must include 'px' for each unit
// @param opts: space delimited list of additional properties; for example 'solid blue' to set type and colour of border
// 
// Example Use:
// p {
//   prop('border', 12px, solid blue); 
// }
// 
// Will produce:
// p {border: 12px solid blue; border: .75rem solid blue;}
//
//
// =================================================

prop(type, units, opts = null) {
  if $old-ie {
    {type}: units opts;
  }
  {type}: unquote(argJoin(' ', units)) opts;
}

// ====
// TEXT MIXINS
// ================================================================================
textTruncate() {
  overflow: hidden;
  width: 100%;
  textOverflow(type);
}
// Text Overflow
// @param type: ellipsis[clip, <string>] 
// Note: <string> 
// =================================================

textOverflow(type = 'ellipsis') {
  prop('text-overflow', type);
}

// ====
// VISUAL MIXINS
// =================================================

// Shape Mixins
// =================================================

// Arrows
arrow(
  dir = up,
  width = 6px,
  colour = $text,
) {
  display: inline-block;
  width: 0;
  height: 0;
  prop(border, width, solid transparent);
  if (dir == up) {
    border-top: none;
    border-bottom-color: colour;
  }else if (dir == right) {
    border-right: none;
    border-left-color: colour;
  }else if (dir == down) {
    border-bottom: none;
    border-top-color: colour;
  }else {
    border-right: none;
    border-left-color: colour;
  }
  vertical-align: bottom
}
// Circles

// Square/Rectangle

// ====
// UTILITY MIXINS
// ================================================================================

// Dev Mode Grid Lines
// To override this look in themes/_basic.styl
// =================================================
devModeGrid() {
  if($gridLinesColour) {
    $gridColour = $gridLinesColour;
  }else{
    $gridColour = #f0c; // Touch of Paul Irish Pink
  }
  background-image: linear-gradient(top, $gridColour 1px, transparent 1px, only: webkit moz official);
}


// Consistent Padding for modules
// From: http://codepen.io/thejameskyle/pen/pthGd
// Basically uses margin collapsing to ensure you do not need to reset margins for child elements 
//
// $padding: amount of padding to use inside module, default set to $baseGutter for harmony.
//           Only accepts single value
// =================================================
modulePadding(
  $padding = $baseGutter
) {
  prop('padding', 0 $padding);

  &:before, &:after {
    display: block;
    height: 0;
    content:'';
  }
  // Adds bottom margin
  &:before {
    prop('margin-bottom',$padding);
  }
  // Adds top margin
  &:after {
    prop('margin-top',$padding);
  }
}
